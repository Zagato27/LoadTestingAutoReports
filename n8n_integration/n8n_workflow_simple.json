{
  "name": "Load Testing Reports - Grafana + AI",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1440,
        300
      ],
      "id": "manual-trigger",
      "name": "Manual Trigger"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "input-start",
              "name": "start",
              "value": "2025-02-21T11:30",
              "type": "string"
            },
            {
              "id": "input-end",
              "name": "end",
              "value": "2025-02-21T14:10",
              "type": "string"
            },
            {
              "id": "input-service",
              "name": "service",
              "value": "NSI",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1200,
        300
      ],
      "id": "user-input",
      "name": "User Input",
      "notes": "Измените значения перед запуском workflow"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "start-time",
              "name": "start",
              "value": "={{ $json.start }}",
              "type": "string"
            },
            {
              "id": "end-time",
              "name": "end",
              "value": "={{ $json.end }}",
              "type": "string"
            },
            {
              "id": "service-name",
              "name": "service",
              "value": "={{ $json.service }}",
              "type": "string"
            },
            {
              "id": "start-ts",
              "name": "start_timestamp",
              "value": "={{ new Date($json.start).getTime() }}",
              "type": "number"
            },
            {
              "id": "end-ts",
              "name": "end_timestamp",
              "value": "={{ new Date($json.end).getTime() }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -960,
        300
      ],
      "id": "parse-input",
      "name": "Parse Input"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-start",
              "leftValue": "={{ $json.start }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "check-end",
              "leftValue": "={{ $json.end }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "check-service",
              "leftValue": "={{ $json.service }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -720,
        480
      ],
      "id": "validate-input",
      "name": "Validate Input"
    },
    {
      "parameters": {
        "jsCode": "const service = $input.first().json.service;\nconst METRICS_CONFIG = {\n  \"NSI\": {\n    \"confluence_url\": \"https://confluence.test.ru\",\n    \"page_sample_id\": \"682908703\",\n    \"page_parent_id\": \"882999920\",\n    \"grafana_base_url\": \"http://0.0.0.0:3000\",\n    \"metrics\": [\n      {\n        \"name\": \"RPS\",\n        \"grafana_url\": \"/render/d-solo/XKhgaUpikugieq/k6-load-testing-results?orgId=1&panelId=17&width=1000&height=500&tz=Europe%2FMoscow\"\n      },\n      {\n        \"name\": \"ResponseTimeTable\",\n        \"grafana_url\": \"/render/d-solo/XKhgaUpikugieq/k6-load-testing-results?orgId=1&panelId=67&width=1000&height=900&tz=Europe%2FMoscow\"\n      }\n    ]\n  }\n};\n\nconst config = METRICS_CONFIG[service];\nif (!config) {\n  throw new Error(`Service ${service} not found in config`);\n}\n\nreturn { json: config };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -480,
        300
      ],
      "id": "get-service-config",
      "name": "Get Service Config",
      "notes": "Конфигурация без логов Loki"
    },
    {
      "parameters": {
        "url": "={{ $('Get Service Config').item.json.confluence_url }}/rest/api/content/{{ $('Get Service Config').item.json.page_sample_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -240,
        300
      ],
      "id": "get-template-page",
      "name": "Get Template Page",
      "credentials": {
        "httpBasicAuth": {
          "id": "confluence-creds",
          "name": "Confluence Credentials"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Get Service Config').item.json.confluence_url }}/rest/api/content",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"type\": \"page\",\n  \"title\": \"{{ $('Get Template Page').item.json.title }} - {{ new Date().toISOString().split('T')[0] }}\",\n  \"space\": {\n    \"key\": \"{{ $('Get Template Page').item.json.space.key }}\"\n  },\n  \"ancestors\": [\n    {\n      \"id\": \"{{ $('Get Service Config').item.json.page_parent_id }}\"\n    }\n  ],\n  \"body\": {\n    \"storage\": {\n      \"value\": {{ $('Get Template Page').item.json.body.storage.value.toJsonString() }},\n      \"representation\": \"storage\"\n    }\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        60
      ],
      "id": "copy-page",
      "name": "Copy Confluence Page",
      "credentials": {
        "httpBasicAuth": {
          "id": "confluence-creds",
          "name": "Confluence Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const config = $('Get Service Config').first().json;\nconst start = $('Parse Input').first().json.start_timestamp;\nconst end = $('Parse Input').first().json.end_timestamp;\nconst service = $('Parse Input').first().json.service;\nconst pageId = $('Copy Confluence Page').first().json.id;\n\nconst items = [];\nfor (const metric of config.metrics) {\n  items.push({\n    json: {\n      name: metric.name,\n      url: `${config.grafana_base_url}${metric.grafana_url}&from=${start}&to=${end}`,\n      service: service,\n      page_id: pageId\n    }\n  });\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        -120
      ],
      "id": "prepare-metrics",
      "name": "Prepare Metrics"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        120
      ],
      "id": "download-grafana-image",
      "name": "Download Grafana Image",
      "credentials": {
        "httpBasicAuth": {
          "id": "grafana-creds",
          "name": "Grafana Credentials"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Get Service Config').item.json.confluence_url }}/rest/api/content/{{ $json.page_id }}/child/attachment",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Atlassian-Token",
              "value": "nocheck"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        720,
        120
      ],
      "id": "upload-grafana-to-confluence",
      "name": "Upload to Confluence",
      "credentials": {
        "httpBasicAuth": {
          "id": "confluence-creds",
          "name": "Confluence Credentials"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "metric-name",
              "name": "metric_name",
              "value": "={{ $('Prepare Metrics').item.json.name }}",
              "type": "string"
            },
            {
              "id": "placeholder",
              "name": "placeholder",
              "value": "={{ '$$' + $('Prepare Metrics').item.json.name + '$$' }}",
              "type": "string"
            },
            {
              "id": "replacement",
              "name": "replacement",
              "value": "={{ '<ac:image><ri:attachment ri:filename=\"' + $('Prepare Metrics').item.json.name + '_' + $('Prepare Metrics').item.json.service + '_' + $('Prepare Metrics').item.json.page_id + '.jpg\" /></ac:image>' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        960,
        120
      ],
      "id": "prepare-metric-placeholder",
      "name": "Prepare Metric Placeholder"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=http://ai-analyzer:5001/analyze",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"start\": {{ $('Parse Input').item.json.start_timestamp }},\n  \"end\": {{ $('Parse Input').item.json.end_timestamp }}\n}",
        "options": {
          "timeout": 300000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        240,
        -120
      ],
      "id": "call-ai-analyzer",
      "name": "Call AI Analyzer",
      "notes": "AI анализ метрик (5 мин timeout)"
    },
    {
      "parameters": {
        "jsCode": "const aiResponse = $input.first().json;\n\nif (aiResponse.status !== 'success') {\n  throw new Error('AI analysis failed: ' + (aiResponse.message || 'Unknown error'));\n}\n\nconst placeholders = aiResponse.data.placeholders || {};\nconst items = [];\n\nfor (const [key, value] of Object.entries(placeholders)) {\n  items.push({\n    json: {\n      placeholder: key,\n      replacement: value,\n      type: 'ai'\n    }\n  });\n}\n\nreturn items.length > 0 ? items : [{ json: { placeholder: '$$no_ai$$', replacement: 'AI analysis not available' } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        480,
        480
      ],
      "id": "process-ai-results",
      "name": "Process AI Results"
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "multiplex",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1200,
        300
      ],
      "id": "merge-all-placeholders",
      "name": "Merge Grafana + AI"
    },
    {
      "parameters": {
        "jsCode": "const allItems = $input.all();\nconst pageId = $('Copy Confluence Page').first().json.id;\nconst confluenceUrl = $('Get Service Config').first().json.confluence_url;\n\nconst pageUrl = `${confluenceUrl}/rest/api/content/${pageId}?expand=body.storage,version`;\n\nreturn [{\n  json: {\n    page_id: pageId,\n    page_url: pageUrl,\n    confluence_url: confluenceUrl,\n    placeholders: allItems.map(item => ({\n      placeholder: item.json.placeholder,\n      replacement: item.json.replacement\n    }))\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        300
      ],
      "id": "aggregate-all-placeholders",
      "name": "Aggregate Placeholders"
    },
    {
      "parameters": {
        "url": "={{ $json.page_url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1680,
        300
      ],
      "id": "get-current-page",
      "name": "Get Current Page",
      "credentials": {
        "httpBasicAuth": {
          "id": "confluence-creds",
          "name": "Confluence Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const pageData = $('Get Current Page').first().json;\nconst placeholders = $('Aggregate Placeholders').first().json.placeholders;\n\nlet content = pageData.body.storage.value;\n\nfor (const item of placeholders) {\n  const placeholder = item.placeholder;\n  const replacement = item.replacement || '';\n  content = content.split(placeholder).join(replacement);\n}\n\nreturn [{\n  json: {\n    page_id: pageData.id,\n    content: content,\n    version: pageData.version.number + 1,\n    title: pageData.title\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1920,
        300
      ],
      "id": "replace-placeholders",
      "name": "Replace Placeholders"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $('Get Service Config').item.json.confluence_url }}/rest/api/content/{{ $json.page_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"id\": \"{{ $json.page_id }}\",\n  \"type\": \"page\",\n  \"title\": \"{{ $json.title }}\",\n  \"version\": {\n    \"number\": {{ $json.version }}\n  },\n  \"body\": {\n    \"storage\": {\n      \"value\": {{ $json.content.toJsonString() }},\n      \"representation\": \"storage\"\n    }\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2160,
        300
      ],
      "id": "update-confluence-page",
      "name": "Update Confluence Page",
      "credentials": {
        "httpBasicAuth": {
          "id": "confluence-creds",
          "name": "Confluence Credentials"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error",
              "name": "error",
              "value": "Missing required parameters: start, end, service",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -480,
        720
      ],
      "id": "error-response",
      "name": "Error Response"
    },
    {
      "parameters": {
        "content": "## Load Testing Reports: Grafana + AI\n\n✅ Grafana метрики\n✅ AI анализ (JVM, DB, Kafka, Microservices)\n❌ Loki логи (убраны)\n\nУпрощенный workflow без Loki интеграции.\nВсе зависимости изолированы в n8n_integration/",
        "height": 300,
        "width": 400
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1200,
        -100
      ],
      "id": "workflow-description",
      "name": "Workflow Description"
    }
  ],
  "connections": {
    "Parse Input": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "Get Service Config",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Service Config": {
      "main": [
        [
          {
            "node": "Get Template Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Template Page": {
      "main": [
        [
          {
            "node": "Copy Confluence Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Copy Confluence Page": {
      "main": [
        [
          {
            "node": "Prepare Metrics",
            "type": "main",
            "index": 0
          },
          {
            "node": "Call AI Analyzer",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Metrics": {
      "main": [
        [
          {
            "node": "Download Grafana Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Grafana Image": {
      "main": [
        [
          {
            "node": "Upload to Confluence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload to Confluence": {
      "main": [
        [
          {
            "node": "Prepare Metric Placeholder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Metric Placeholder": {
      "main": [
        [
          {
            "node": "Merge Grafana + AI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Call AI Analyzer": {
      "main": [
        [
          {
            "node": "Process AI Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Results": {
      "main": [
        [
          {
            "node": "Merge Grafana + AI",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Grafana + AI": {
      "main": [
        [
          {
            "node": "Aggregate Placeholders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Placeholders": {
      "main": [
        [
          {
            "node": "Get Current Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Current Page": {
      "main": [
        [
          {
            "node": "Replace Placeholders",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Placeholders": {
      "main": [
        [
          {
            "node": "Update Confluence Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Confluence Page": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Response": {
      "main": []
    },
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "User Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "User Input": {
      "main": [
        [
          {
            "node": "Parse Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "load-testing-simple-v1",
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "id": "load-testing-simple",
  "tags": []
}