{
  "name": "Load Testing Auto Reports",
  "nodes": [
    {
      "parameters": {
        "path": "load-testing/report/create",
        "options": {},
        "responseMode": "responseNode"
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1200,
        300
      ],
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "webhookId": "load-testing-webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "start-time",
              "name": "start",
              "value": "={{ $json.body.start }}",
              "type": "string"
            },
            {
              "id": "end-time", 
              "name": "end",
              "value": "={{ $json.body.end }}",
              "type": "string"
            },
            {
              "id": "service-name",
              "name": "service",
              "value": "={{ $json.body.service }}",
              "type": "string"
            },
            {
              "id": "start-ts",
              "name": "start_timestamp",
              "value": "={{ new Date($json.body.start).getTime() }}",
              "type": "number"
            },
            {
              "id": "end-ts",
              "name": "end_timestamp",
              "value": "={{ new Date($json.body.end).getTime() }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -960,
        300
      ],
      "id": "parse-input",
      "name": "Parse Input"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "check-start",
              "leftValue": "={{ $json.start }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "check-end",
              "leftValue": "={{ $json.end }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            },
            {
              "id": "check-service",
              "leftValue": "={{ $json.service }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -720,
        300
      ],
      "id": "validate-input",
      "name": "Validate Input"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-msg",
              "name": "error",
              "value": "Missing required parameters: start, end, service",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -480,
        480
      ],
      "id": "error-response",
      "name": "Error Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ { \"status\": \"error\", \"message\": $json.error } }}",
        "options": {
          "responseCode": 400
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        -240,
        480
      ],
      "id": "send-error",
      "name": "Send Error"
    },
    {
      "parameters": {
        "url": "={{ $('Get Service Config').item.json.confluence_url }}/rest/api/content/{{ $('Get Service Config').item.json.page_sample_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -240,
        120
      ],
      "id": "get-template-page",
      "name": "Get Template Page",
      "credentials": {
        "httpBasicAuth": {
          "id": "confluence-creds",
          "name": "Confluence Credentials"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Get Service Config').item.json.confluence_url }}/rest/api/content",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"type\": \"page\",\n  \"title\": \"{{ $('Get Template Page').item.json.title }} - {{ new Date().toISOString().split('T')[0] }}\",\n  \"space\": {\n    \"key\": \"{{ $('Get Template Page').item.json.space.key }}\"\n  },\n  \"ancestors\": [\n    {\n      \"id\": \"{{ $('Get Service Config').item.json.page_parent_id }}\"\n    }\n  ],\n  \"body\": {\n    \"storage\": {\n      \"value\": {{ $('Get Template Page').item.json.body.storage.value.toJsonString() }},\n      \"representation\": \"storage\"\n    }\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        120
      ],
      "id": "copy-page",
      "name": "Copy Confluence Page",
      "credentials": {
        "httpBasicAuth": {
          "id": "confluence-creds",
          "name": "Confluence Credentials"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Загружаем конфигурацию метрик\nconst service = $input.first().json.service;\nconst METRICS_CONFIG = {\n  \"NSI\": {\n    \"confluence_url\": \"https://confluence.test.ru\",\n    \"page_sample_id\": \"682908703\",\n    \"page_parent_id\": \"882999920\",\n    \"grafana_base_url\": \"http://0.0.0.0:3000\",\n    \"loki_url\": \"http://gateway.loki.url/loki/api/v1/query_range\",\n    \"metrics\": [\n      {\n        \"name\": \"RPS\",\n        \"grafana_url\": \"/render/d-solo/XKhgaUpikugieq/k6-load-testing-results?orgId=1&panelId=17&width=1000&height=500&tz=Europe%2FMoscow\"\n      },\n      {\n        \"name\": \"ResponseTimeTable\",\n        \"grafana_url\": \"/render/d-solo/XKhgaUpikugieq/k6-load-testing-results?orgId=1&panelId=67&width=1000&height=900&tz=Europe%2FMoscow\"\n      }\n    ],\n    \"logs\": [\n      {\n        \"placeholder\": \"micro-registry-nsi\",\n        \"filter_query\": '{namespace=~\"apps\", service_name=~\"micro-registry-nsi\"} |= \"ERROR\"'\n      }\n    ]\n  }\n};\n\nconst config = METRICS_CONFIG[service];\nif (!config) {\n  throw new Error(`Service ${service} not found in config`);\n}\n\nreturn { json: config };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -480,
        120
      ],
      "id": "get-service-config",
      "name": "Get Service Config"
    },
    {
      "parameters": {
        "jsCode": "// Итерируем по метрикам для параллельной загрузки\nconst config = $('Get Service Config').first().json;\nconst start = $('Parse Input').first().json.start_timestamp;\nconst end = $('Parse Input').first().json.end_timestamp;\nconst service = $('Parse Input').first().json.service;\n\nconst items = [];\nfor (const metric of config.metrics) {\n  items.push({\n    json: {\n      name: metric.name,\n      url: `${config.grafana_base_url}${metric.grafana_url}&from=${start}&to=${end}`,\n      service: service\n    }\n  });\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        120
      ],
      "id": "prepare-metrics",
      "name": "Prepare Metrics"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        120
      ],
      "id": "download-grafana-image",
      "name": "Download Grafana Image",
      "credentials": {
        "httpBasicAuth": {
          "id": "grafana-creds",
          "name": "Grafana Credentials"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Get Service Config').item.json.confluence_url }}/rest/api/content/{{ $('Copy Confluence Page').item.json.id }}/child/attachment",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "inputDataFieldName": "data"
            }
          ]
        },
        "options": {
          "response": {
            "response": {}
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        720,
        120
      ],
      "id": "upload-to-confluence",
      "name": "Upload Image to Confluence",
      "credentials": {
        "httpBasicAuth": {
          "id": "confluence-creds",
          "name": "Confluence Credentials"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "placeholder",
              "name": "placeholder",
              "value": "={{ \"$$\" + $('Prepare Metrics').item.json.name + \"$$\" }}",
              "type": "string"
            },
            {
              "id": "replacement",
              "name": "replacement",
              "value": "={{ '<ac:image><ri:attachment ri:filename=\"' + $('Prepare Metrics').item.json.name + '_' + $('Prepare Metrics').item.json.service + '_' + $('Copy Confluence Page').item.json.id + '.jpg\" /></ac:image>' }}",
              "type": "string"
            },
            {
              "id": "metric-name",
              "name": "metric_name",
              "value": "={{ $('Prepare Metrics').item.json.name }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        960,
        120
      ],
      "id": "prepare-placeholder",
      "name": "Prepare Placeholder"
    },
    {
      "parameters": {
        "jsCode": "// Собираем все плейсхолдеры для замены\nconst items = $input.all();\nconst pageId = $('Copy Confluence Page').first().json.id;\nconst confluenceUrl = $('Get Service Config').first().json.confluence_url;\n\n// Получаем текущую версию страницы\nconst pageData = await $executeWorkflow('Get Page', {\n  page_id: pageId\n});\n\nlet content = pageData.body.storage.value;\nlet version = pageData.version.number;\n\n// Заменяем все плейсхолдеры\nfor (const item of items) {\n  const placeholder = item.json.placeholder;\n  const replacement = item.json.replacement;\n  content = content.replace(placeholder, replacement);\n}\n\nreturn [{\n  json: {\n    page_id: pageId,\n    content: content,\n    version: version + 1,\n    confluence_url: confluenceUrl\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1200,
        120
      ],
      "id": "aggregate-replacements",
      "name": "Aggregate Replacements"
    },
    {
      "parameters": {
        "jsCode": "// Итерируем по логам для загрузки\nconst config = $('Get Service Config').first().json;\nconst start = Math.floor($('Parse Input').first().json.start_timestamp / 1000);\nconst end = Math.floor($('Parse Input').first().json.end_timestamp / 1000);\nconst service = $('Parse Input').first().json.service;\n\nconst items = [];\nfor (const log of config.logs || []) {\n  items.push({\n    json: {\n      placeholder: log.placeholder,\n      filter_query: log.filter_query,\n      loki_url: config.loki_url,\n      start: start,\n      end: end,\n      service: service\n    }\n  });\n}\n\nreturn items.length > 0 ? items : [{ json: { skip: true } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        240,
        360
      ],
      "id": "prepare-logs",
      "name": "Prepare Logs"
    },
    {
      "parameters": {
        "url": "={{ $json.loki_url }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.filter_query }}"
            },
            {
              "name": "start",
              "value": "={{ $json.start }}"
            },
            {
              "name": "end",
              "value": "={{ $json.end }}"
            },
            {
              "name": "limit",
              "value": "5000"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        480,
        360
      ],
      "id": "fetch-loki-logs",
      "name": "Fetch Loki Logs"
    },
    {
      "parameters": {
        "jsCode": "// Парсим логи из Loki и сохраняем в файл\nconst data = $input.first().json;\nif (!data || !data.data || !data.data.result) {\n  return [{ json: { content: 'No logs found' } }];\n}\n\nconst logs = [];\nfor (const stream of data.data.result) {\n  for (const entry of stream.values) {\n    const timestamp = new Date(parseInt(entry[0]) / 1000000);\n    logs.push(`${timestamp.toISOString()} ${entry[1]}`);\n  }\n}\n\nconst content = logs.join('\\n');\nreturn [{\n  json: {\n    content: content,\n    filename: `${$('Prepare Logs').item.json.placeholder}_${$('Prepare Logs').item.json.service}.log`\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        720,
        360
      ],
      "id": "parse-logs",
      "name": "Parse Logs"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Get Service Config').item.json.confluence_url }}/rest/api/content/{{ $('Copy Confluence Page').item.json.id }}/child/attachment",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "value": "={{ $json.content }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        960,
        360
      ],
      "id": "upload-logs",
      "name": "Upload Logs to Confluence",
      "credentials": {
        "httpBasicAuth": {
          "id": "confluence-creds",
          "name": "Confluence Credentials"
        }
      }
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "={{ $json.confluence_url }}/rest/api/content/{{ $json.page_id }}",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBasicAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"id\": \"{{ $json.page_id }}\",\n  \"type\": \"page\",\n  \"title\": \"{{ $('Copy Confluence Page').item.json.title }}\",\n  \"version\": {\n    \"number\": {{ $json.version }}\n  },\n  \"body\": {\n    \"storage\": {\n      \"value\": {{ $json.content.toJsonString() }},\n      \"representation\": \"storage\"\n    }\n  }\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1440,
        120
      ],
      "id": "update-page",
      "name": "Update Confluence Page",
      "credentials": {
        "httpBasicAuth": {
          "id": "confluence-creds",
          "name": "Confluence Credentials"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success-status",
              "name": "status",
              "value": "success",
              "type": "string"
            },
            {
              "id": "success-message",
              "name": "message",
              "value": "Report created successfully",
              "type": "string"
            },
            {
              "id": "page-id",
              "name": "page_id",
              "value": "={{ $('Copy Confluence Page').item.json.id }}",
              "type": "string"
            },
            {
              "id": "page-url",
              "name": "page_url",
              "value": "={{ $('Get Service Config').item.json.confluence_url }}/pages/viewpage.action?pageId={{ $('Copy Confluence Page').item.json.id }}",
              "type": "string"
            },
            {
              "id": "service-name-result",
              "name": "service",
              "value": "={{ $('Parse Input').item.json.service }}",
              "type": "string"
            },
            {
              "id": "start-result",
              "name": "start",
              "value": "={{ $('Parse Input').item.json.start_timestamp }}",
              "type": "number"
            },
            {
              "id": "end-result",
              "name": "end",
              "value": "={{ $('Parse Input').item.json.end_timestamp }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1680,
        120
      ],
      "id": "success-response",
      "name": "Success Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        1920,
        120
      ],
      "id": "send-success",
      "name": "Send Success Response"
    },
    {
      "parameters": {
        "content": "## Load Testing Auto Reports Workflow\n\nЭтот workflow автоматизирует создание отчетов по нагрузочному тестированию:\n\n1. Принимает параметры через webhook (start, end, service)\n2. Копирует шаблонную страницу Confluence\n3. Загружает графики из Grafana\n4. Собирает логи из Loki\n5. Обновляет плейсхолдеры на странице\n6. Возвращает ссылку на созданный отчет\n\n### Конфигурация:\n- Нужно создать credentials для Confluence (httpBasicAuth)\n- Нужно создать credentials для Grafana (httpBasicAuth)\n- Настроить METRICS_CONFIG в узле 'Get Service Config'",
        "height": 400,
        "width": 500
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1200,
        -100
      ],
      "id": "workflow-description",
      "name": "Workflow Description"
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Parse Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Input": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "Get Service Config",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Response": {
      "main": [
        [
          {
            "node": "Send Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Service Config": {
      "main": [
        [
          {
            "node": "Get Template Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Template Page": {
      "main": [
        [
          {
            "node": "Copy Confluence Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Copy Confluence Page": {
      "main": [
        [
          {
            "node": "Prepare Metrics",
            "type": "main",
            "index": 0
          },
          {
            "node": "Prepare Logs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Metrics": {
      "main": [
        [
          {
            "node": "Download Grafana Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Grafana Image": {
      "main": [
        [
          {
            "node": "Upload Image to Confluence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Image to Confluence": {
      "main": [
        [
          {
            "node": "Prepare Placeholder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Placeholder": {
      "main": [
        [
          {
            "node": "Aggregate Replacements",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Replacements": {
      "main": [
        [
          {
            "node": "Update Confluence Page",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Logs": {
      "main": [
        [
          {
            "node": "Fetch Loki Logs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Loki Logs": {
      "main": [
        [
          {
            "node": "Parse Logs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Logs": {
      "main": [
        [
          {
            "node": "Upload Logs to Confluence",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Confluence Page": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Response": {
      "main": [
        [
          {
            "node": "Send Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "load-testing-v1",
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "id": "load-testing-auto-reports",
  "tags": []
}

