version: '3.8'

services:
  # n8n workflow engine
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=Europe/Moscow
      - N8N_LOG_LEVEL=info
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - n8n-network
    depends_on:
      - ai-analyzer

  # AI Analyzer Microservice (изолированный)
  ai-analyzer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ai-analyzer
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - AI_SERVICE_HOST=0.0.0.0
      - AI_SERVICE_PORT=5001
      - AI_SERVICE_DEBUG=false
      # Настройки из конфига (можно переопределить через .env)
      - PROMETHEUS_URL=${PROMETHEUS_URL:-http://prometheus:9090}
    volumes:
      # Конфиги AI (если нужно переопределить)
      - ./AI/config.py:/app/AI/config.py:ro
      # Сертификаты для mTLS (опционально)
      - ./certs:/app/certs:ro
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # PostgreSQL для n8n (опционально, для продакшена)
  postgres:
    image: postgres:15-alpine
    container_name: n8n-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=n8n
      - POSTGRES_USER=n8n
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-n8n_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - n8n-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U n8n"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - production

volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local

networks:
  n8n-network:
    driver: bridge

